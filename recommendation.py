# -*- coding: utf-8 -*-
"""soft_eng_reco_system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VacM3-3QZeqWP0-Ov3NotoPVTp6CF-VF
"""

import pandas as pd
import numpy as np
import tensorflow as tf
import pandas as pd
from tensorflow import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Activation, Dense, Flatten, BatchNormalization, Conv2D, MaxPool2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.metrics import categorical_crossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import confusion_matrix
from keras.layers import AveragePooling2D
from sklearn import metrics
from sklearn.preprocessing import StandardScaler
import itertools
import os
import shutil
import random
import glob
import matplotlib.pyplot as plt
import json

df1=pd.read_csv('/content/Books_final.csv')
df1.drop('Unnamed: 0',axis=1,inplace=True)
f=open('data.json')
t=json.load(f)
f.close()

a_series = pd.Series(t, index = df1.columns)
new_df=df1.append(a_series, ignore_index=True)
k= StandardScaler()
standard=k.fit_transform(new_df)

import math 
def cosinesim(df,df_1):
  sum=[]
  sum1=0
  sum2=0
  k=0
  for i in range(len(df_1)):
    k=0
    for j in range(len(df)):
      k=k+float(df_1[i][j])*float(df[j])
    sum1=0
    sum2=0
    for j in range(len(df)):
      sum1=sum1+df[j]**2
      sum2=sum2+float(df_1[i][j])**2
    k1=math.sqrt(sum1)
    k2=math.sqrt(sum2)
    final=k/(k1*k2)
    sum.append(final)
  
  n=sum
  e=sorted(n,reverse=True)
  top10=[]
  for j in e:
   if len(top10)<=10:
    for i in n:
     if j==i:
      top10.append(n.index(i))
      break
   else:
      break
  return top10

import json
k1=cosinesim(standard[72255],standard)
json_object = json.dumps(k1[1:12], indent = 4)
print(json_object)

